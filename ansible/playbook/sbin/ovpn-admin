#!/usr/bin/env python2
import argparse, os, qrcode, re, requests, sqlite3, subprocess, sys

# export ARGS='--api https://heimdall.domain.tld/ --keymatter /opt/openvpn/etc/client --secret "lulz"'
# ovpn-admin ${ARGS} user-list
# ovpn-admin ${ARGS} user-show email@domain.tld
# ovpn-admin ${ARGS} user-create email@domain.tld
# ovpn-admin ${ARGS} user-delete email@domain.tld # revokes all & deletes row
# ovpn-admin ${ARGS} certs-issue email@domain.tld "description here"
# ovpn-admin ${ARGS} certs-revoke <fingerprint>
# ovpn-admin ${ARGS} events
# ovpn-admin ${ARGS} events-clear # for log rotation

ARGS = None

def init_args():
  parser = argparse.ArgumentParser(description="VPN user credentials management")
  parser.add_argument('--api', '-a', type=str, default='https://heimdall.domain.tld/', help='base URL to Heimdall (the API server)')
  parser.add_argument('--secret', '-s', type=str, default='Sekr1tPassw0rd', help='shared API secret used by server for auth (in addition to client key)')
  parser.add_argument('--keymatter', '-k', type=str, default='/opt/openvpn/etc/client', help='path to a client.[key|crt] to use for API access')
  parser.add_argument('--password', '-p', type=str, default='', help='password (if any) for the client key')
  parser.add_argument('op', choices=['user-list', 'user-show', 'user-create', 'user-delete', 'certs-issue', 'certs-revoke', 'events', 'events-clear'])
  parser.add_argument('subargs', nargs=argparse.REMAINDER)
  global ARGS
  ARGS = parser.parse_args()


def user_list(args):
  resp = do_request("GET", "/users")
  users = resp.json()['Users']
  longest = 0
  for user in users:
    longest = len(user['Email']) > longest and len(user['Email']) or longest
  start = longest + 1
  print "Email%sActive/Revoked Certs" % (' ' * (start - 5),)
  for user in users:
    user.update({'gap': ' ' * (start - len(user['Email']))})
    print "%(Email)s%(gap)s%(ActiveCerts)s/%(RevokedCerts)s" % user


def user_show(args):
  parser = argparse.ArgumentParser(description="Display a user")
  parser.add_argument('email', type=str)
  args = parser.parse_args(args)
  resp = do_request("GET", "/user/%s" % (args.email,))
  if not resp or not resp.json() or resp.status_code != 200:
    print "%s not found" % (args.email,)
    raise SystemExit(1)
  user = resp.json()
  print "%s created at %s" % (user['Email'], user['Created'])
  print "\tActive VPN Certificates:"
  if not user['ActiveCerts']:
    print "\t\tno active certificates"
  else:
    for c in user['ActiveCerts']:
      print "\t\t%s - %s" % (c['Description'], c['Fingerprint'])
      print "\t\t\tCreated: %s; Expires: %s%s" % (c['Created'], c['Expires'], c['Revoked'] and ("; Revoked: %s" % (c['Revoked'],) or ""))
  print "\tRevoked VPN Certificates:"
  if not user['RevokedCerts']:
    print "\t\tno revoked certificates"
  else:
    for c in user['RevokedCerts']:
      print "\t\t%s - %s" % (c['Description'], c['Fingerprint'])
      print "\t\t\tCreated: %s; Expires: %s%s" % (c['Created'], c['Expires'], c['Revoked'] and ("; Revoked: %s" % (c['Revoked'],) or ""))


def user_create(args):
  parser = argparse.ArgumentParser(description="Create a user or reset a user's TOTP seed")
  parser.add_argument('email', type=str)
  args = parser.parse_args(args)
  resp = do_request("PUT", "/user/%s" % (args.email,))
  if not resp or not resp.json() or resp.status_code not in [200, 201]:
    print "error creating/updating user"
    raise SystemExit(1)
  qr = qrcode.QRCode()
  qr.add_data(resp.json()['TOTPURL'])
  qr.make(fit=True)
  qr.print_ascii(invert=True)


def user_delete(args):
  parser = argparse.ArgumentParser(description="delete a user")
  parser.add_argument('email', type=str)
  args = parser.parse_args(args)
  resp = do_request("DELETE", "/user/%s" % (args.email,))
  if not resp or resp.status_code not in [200, 201]:
    if resp.status_code == 404:
      print "no such user"
    else:
      print "error creating/updating user"
    raise SystemExit(1)


def certs_issue(args):
  parser = argparse.ArgumentParser(description="Issue a new certificate")
  parser.add_argument('email', type=str, help="the user to be issued the certificate")
  parser.add_argument('desc', type=str, help="description or note, e.g. machine name")
  args = parser.parse_args(args)
  desc = args.desc or ''
  email = args.email or ''
  if not email: 
    print "missing email"
    raise SystemExit(1)
  if not desc:
    print "missing description"
    raise SystemExit(1)
  payload = {'Email': email, 'Description': desc}
  resp = do_request("POST", "/certs/%s" % (email,), payload=payload)
  if not resp or resp.status_code != 201:
    if resp.status_code == 404:
      print "%s not found" % (email,)
    else:
      print "error issuing new certificate for %s" % (email,)
    raise SystemExit(1)
  if resp.headers['content-type'] != 'application/ovpn':
    print "server returned wrong content-type on success"
    raise SystemExit(1)
  oname = "./%s.ovpn" % (re.sub(r"[^a-zA-Z0-9-_.]", "", desc),)
  file(oname, 'w').write(resp.content)
  print "New certificate issued for %s. Wrote file as '%s'." % (email, oname)


def certs_revoke(args):
  parser = argparse.ArgumentParser(description="Revoke a certificate by fingerprint")
  parser.add_argument('fingerprint', type=str)
  args = parser.parse_args(args)
  fp = args.fingerprint.lower()
  resp = do_request("DELETE", "/cert/%s" % (fp,))
  if not resp or resp.status_code != 200:
    print "error revoking certificate %s" % (fp,)
    raise SystemExit(1)
  else:
    print "certificate revoked"


def events_clear(args):
  return events(args, clear=True)

def events(args, clear=False):
  parser = argparse.ArgumentParser(description="Display events")
  parser.add_argument('--raw', '-r', type=bool, default=False)
  args = parser.parse_args(args)
  method = clear and "DELETE" or "GET"
  resp = do_request(method, "/events")
  if not resp or not resp.status_code == 200:
    print "error fetching events from API server", resp.status_code
    raise SystemExit(1)
  if args.raw:
    print resp.json()['Events']
  else:
    for ev in resp.json()['Events']:
      print '%(Timestamp)s: [%(Event)s] [%(Email)s] [%(Value)s]' % ev


def do_request(method, path, payload=None):
  s = requests.session()
  s.headers.update({'X-Playground-API-Secret': ARGS.secret})
  url = "/".join([i.strip('/') for i in (ARGS.api, path)])
  cert = os.path.join(ARGS.keymatter, "client.crt")
  key = os.path.join(ARGS.keymatter, "client.key")
  cacrt = os.path.join(ARGS.keymatter, "ca.crt")
  return s.request(method, url, json=payload, cert=(cert, key), verify=cacrt)

def main():
  init_args()
  {'user-list': user_list,
   'user-show': user_show,
   'user-create': user_create,
   'user-delete': user_delete,
   'certs-issue': certs_issue,
   'certs-revoke': certs_revoke,
   'events': events,
   'events-clear': events_clear
   }[ARGS.op](ARGS.subargs)

if __name__ == "__main__":
  main()
